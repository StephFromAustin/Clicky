{"version":3,"sources":["components/Jumbotron.js","components/Body.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","react_default","a","createElement","className","children","message","current","top","styles","image","height","width","margin","cage","background","float","border","boxShadow","Body","style","onClick","gamelogic","id","src","alt","charactername","footer","borderTop","pading","clear","Footer","body","backgroundSize","App","state","initial","characters","unselected","topScore","currentScore","shuffle","array","i","length","j","Math","floor","random","_ref","userSelect","undefined","_this","find","character","setState","unselectedCharacter","filter","_this2","this","components_Jumbotron","map","components_Body","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79675e57.chunk.js","sourcesContent":["// DEPENDENCIES | IMPORTS \nimport React from 'react';\n\n// JUMBOTRON \nconst Jumbotron = props => (\n    <div>\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container text-center\">\n                <h1 className=\"display-4\">{props.children}</h1>\n                <p className=\"lead\">{props.message}</p>\n                <p>Current Score: {props.current} Top Score: {props.top}</p>\n            </div>\n        </div>\n    </div>\n)\n\n// EXPORTS\nexport default Jumbotron;","// DEPENDENCIES | IMPORTS\nimport React from 'react';\n\n// STYLE\nconst styles = {\n    image: {\n        height: '140px',\n        width: '140px',\n        margin: '5px'\n    },\n    cage: {\n        height: '150px',\n        width: '150px',\n        background: 'lavender',\n        float: 'left',\n        margin: '28px',\n        border: '1px solid black',\n        boxShadow: '5px 10px 15px gray'\n    }\n}\nconst Body = props => (\n    <div>\n        <div style={styles.cage} onClick={() => props.gamelogic(props.id)}>\n            <img style={styles.image} src={props.image} alt={props.charactername} />\n        </div>\n    </div>\n)\n\nexport default Body;","// DEPENDENCIES | IMPORTS \nimport React from 'react';\n\n// STYLE\nconst styles = {\n    footer: {\n        background: 'white',\n        borderTop: '3px dashed black', \n        pading: \"30px\", \n        clear: \"both\"\n    }\n}\n\n// FOOTER \nconst Footer = () => (\n    <div className='text-center text-black' style={styles.footer}>\n        <h2> Bob's Burgers Memory Game!</h2>\n        <h3> \"I love you but you're all Terrible\" </h3>\n    </div>\n)\n\n// EXPORT \nexport default Footer ","// DEPENDENCIES | IMPORTS \nimport React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport Jumbotron from './components/Jumbotron';\nimport Body from './components/Body';\nimport Footer from './components/Footer';\nimport characters from './characters.json';\n\n// STYLE\nconst styles ={\n  body: { \n    background: \"url https://www.google.com/url?sa=i&source=images&cd=&ved=2ahUKEwj4jpzxzbLfAhUGKa0KHXi_DskQjRx6BAgBEAU&url=https%3A%2F%2Fwww.shutterstock.com%2Fimage-vector%2Fseamless-burger-pattern-vector-wallpaper-isolated-733407430&psig=AOvVaw0xqojYMz61VSnHn5eB39Hh&ust=1545539594880090\",\n   backgroundSize: \"cover\" \n  }\n}\n\nclass App extends Component {\n  state = {\n    initial: characters,\n    unselected: characters,\n    topScore: 0,\n    currentScore: 0,\n    message: 'Click the Bob Burgers Characer to start!!'\n  }\n\n    // CARD SHUFFLE\n  shuffle = array => {\n      for (let i = array.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n  }\n\n  // GAME LOGIC\n  userSelect = id => {\n    const selected = this.state.unselected.find(character => character.id === id)\n\n    if(selected === undefined) {\n      this.setState({\n        unselected: characters,\n        currentScore: 0,\n        message: 'Incorrect, try again!',\n        topScore: this.state.currentScore > this.state.topScore ? this.state.currentScore : this.state.topScore\n        \n      })\n    }else{\n      const unselectedCharacter = this.state.unselected.filter(character => character.id !== id)\n\n      this.setState({\n        unselected: unselectedCharacter,\n        message: \"You guessed correctly! Pick another character!\",\n        currentScore: this.state.currentScore + 1,\n        topScore: this.state.currentScore >= this.state.topScore ? this.state.currentScore: this.state.topScore\n      })\n\n      \n    }\n    this.shuffle(characters)\n  }\n  render() {\n    return (\n      <div style={styles.body}>\n        <Jumbotron message={this.state.message} current={this.state.currentScore} top={this.state.topScore}>Bob's Burger Memory Game!</Jumbotron>\n        <div className='container'>\n          {(this.state.initial).map(character => {\n            return <Body\n            id={character.id}\n            key={character.id} \n            image={character.image} \n            charactername={character.charactername}\n            gamelogic={this.userSelect} />\n          })}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\n// EXPORT \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}